version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: taskqueue
      POSTGRES_USER: taskqueue
      POSTGRES_PASSWORD: taskqueue123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskqueue"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: .
      dockerfile: build/docker/api-gateway.Dockerfile
    ports:
      - "8080:8080"
    environment:
      TQ_DATABASE_HOST: postgres
      TQ_REDIS_HOST: redis
      TQ_LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./configs/dev.yaml:/app/config.yaml

  queue-manager:
    build:
      context: .
      dockerfile: build/docker/queue-manager.Dockerfile
    environment:
      TQ_DATABASE_HOST: postgres
      TQ_REDIS_HOST: redis
      TQ_LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./configs/dev.yaml:/app/config.yaml

  worker:
    build:
      context: .
      dockerfile: build/docker/worker.Dockerfile
    deploy:
      replicas: 3
    environment:
      TQ_DATABASE_HOST: postgres
      TQ_REDIS_HOST: redis
      TQ_LOG_LEVEL: debug
      TQ_WORKER_CONCURRENCY: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./configs/dev.yaml:/app/config.yaml

  monitor:
    build:
      context: .
      dockerfile: build/docker/monitor.Dockerfile
    ports:
      - "8081:8081"
      - "9090:9090" # Metrics
    environment:
      TQ_DATABASE_HOST: postgres
      TQ_REDIS_HOST: redis
      TQ_LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./configs/dev.yaml:/app/config.yaml

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Collector
    environment:
      COLLECTOR_OTLP_ENABLED: true

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
